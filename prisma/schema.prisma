// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:../databases/dev.db"
}

model user {
  id            Int           @id @default(autoincrement())
  full_name     String
  user_name     String        @unique
  email         String        @unique
  password_hash String
  image         String        @default("default-b92a3903-16e4-49ce-be9d-53ff8c0fd24e.png")
  review        review[]
  reservations  Reservation[]

  @@map("Users")
}

model hotel {
  id            Int        @id @default(autoincrement())
  hotel_name    String     @unique
  user_name     String     @unique
  email         String     @unique
  password_hash String
  latitude      String
  longitude     String
  hotel_image   String     @default("hotel-694bfd2d-0672-4953-893e-a4ebd192ae53.png")
  review        review[]
  roomTypes     RoomType[]
  averageRating Int        @default(0)
  

  @@map("Hotels")
}

model RoomType {
  id                  Int           @id @default(autoincrement())
  name                String        @unique
  description         String
  price               Float
  reservationLifetime Int // this is number of minutes a reservation for this room type lasts
  totalNumber         Int // this is the number of rooms under this room type
  hotelId             Int
  hotel               hotel         @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  reservations        Reservation[]
}

model Reservation {
  id                  Int       @id @default(autoincrement())
  startTime           DateTime
  lifetime            Int // this is the number of minutes a reservation lasts for
  expiryTime          DateTime // the time at which the reservation expires (oblivously)
  occupancy           Boolean
  occupancyLifetime   Int? // this is the number of minutes an occupancy lasts for
  occupancyExpiryTime DateTime?

  roomTypeId Int
  roomType   RoomType @relation(fields: [roomTypeId], references: [id], onDelete: Cascade)

  userId Int
  user   user @relation(fields: [userId], references: [id], onDelete: Cascade)

  hotelId Int // these redundancies are intended to number of fetches in different schenarios 
  //with the sense that there will be no update operation on reservation entries.
}

model review {
  id        Int      @id @default(autoincrement())
  authorId  Int
  author    user     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  hotelId   Int
  hotel     hotel    @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  rating    Int
  text      String
  createdAt DateTime @default(now())
}
